import re

            # Querying data from the database #

semstudent = SemesterStudent.query.filter_by(studid=current_user.studid).first()
            
            ### subjecthistories - previously taken na courses (description and code),grades, sems (Residency sa Student), 
subjecthistories = db.session.query(Registration.studid, Registration.sem, Registration.sy, Registration.subjcode, Registration.grade, Registration.section, Subject.subjdesc).filter(Registration.studid==current_user.studid).filter(Registration.subjcode==Subject.subjcode).all()

            ### Lists
sems = db.session.query(Registration.sem).filter_by(studid=current_user.studid).group_by(Registration.sem).all()

listgpas = db.session.query(SemesterStudent.studid, SemesterStudent.gpa, SemesterStudent.sy, SemesterStudent.sem).filter_by(studid=current_user.studid).all()

gpas = []
for gpa in listgpas:
    gpas.append(gpa.gpa)

maxsem = 12
            ### query -> residency = count all semesters of student
residency = len(sems) #total number of sems nga nakuha sa studyante


            ### Comparison Purposes
progs = Program.query.filter_by(progcode).all()

            ### model
model = cp_model.CpModel()

            ### variables
degrees = [] # Container of the Results

subjectsindegrees = []

for degree in degrees:
        subjectsindegree = db.session.query(Program.progcode, Program.progdesc, Program.progdept, Curriculum.curriculum_id, Curriculum.progcode, CurriculumDetails.curriculum_id, CurriculumDetails.curriculum_sem, CurriculumDetails.subjcode).filter(degree==Curriculum.progcode).filter(Curriculum.curriculum_id==CurriculumDetails.curriculum_id).all()

        subjectsindegrees.append(subjectsindegree)

##constraint

model.Add()#student cannot shift to any degree if residency > maxsem
model.Add()#constraint, no more than 4 failure grade on current sem.
model.Add()#no 2 consecutive probation status
            ### the student cannot shift on their current degree
for prog in progs:
        if prog.progcode == semstudent.studmajor:
                model.Add(prog.progcode != semstudent.studmajor)
        else:
                degrees.append(prog.progcode)


for i in subjecthistories:
        if i.grade != 5.00:
                napasarnasubjs.append(i)
        else:
                failedsubj.append(i)

for x in napasarnasubjs:
        model.Add(x != subjectsindegree)


model.Add(i.subjcode != subjectsindegree.subjcode if i.grade != 5.00)

for sub in passedsubj:
        for p in prereqs:
                if (sub.subjcode != p.prereq):
                model.Add()

                        


model.Add(prereq.subjcode != subjectsindegree.subjcode if prereq.prereq != i.subjcode) #exclude subjects that prereq subjects are not taken by student for every degree in the first sem first year
model.Add()#exclude subjects that coreq subjects are not taken by student for every degree in the first sem first year###

model.Add()#sum of units first sem >= 18 if academic status is Regular for every degree first sem first year
model.Add()#sum of units first sem <18 if academic status is Warning for every degree first sem first year
model.Add()#sum of units first sem <=12 if academic status is Probation for every degree first sem first year

model.Add()#exclude subjects that is not open for 1st sem??
model.Add()#exclude subjects that is not open for 2nd sem??


### for every sem, semcounter += 1


### semcounter = 0
### total_sem = residency + semcounter
### model.Add() ##student cannot shift when total_sem > maxsem


model.Add()# 






                ###student cannot shift to degree when constraint is not satisfied(deptconstraints)
                 #deptconstraints
                        #CS

        pattern = re.compile(r'^CCC')
        for x in prevcourse.subjcode:
        if (pattern.match(x))  
                model.Add(grade(degree(Comsci) <= 2.5))
                model.Add(grade(degree(Math) <= 2.5))
                model.Add(grade(degree(Stat) <= 2.5))

                model.Add(degrees != 'CS')#exclude CS to degrees if condition not satisfied

                        #MathStat
                model.Add(grade(degree(Math) <= 2.5))
                model.Add(grade(degree(Stat) <= 2.5))

                model.Add(degrees != 'MATH')#exclude MATH to degrees if condition not satisfied
                model.Add(degrees != 'STAT')#exclude STAT to degrees if condition not satisfied
                        #Nursing
                model.Add(student gpa <= 2.0)

                model.Add()#exclude Nursing to degrees if condition not satisfied

                        #Psych
                model.Add(student gpa <= 1.75)
                model.Add(prevcourse = Pshych 1 or Psych 100)

                model.Add()#exclude Pshych to degrees if condition not satisfied

                        #EECE
                model.Add(prevcourse = Math 60)
                model.Add(sem = 1)

                model.Add()#exclude EE to degrees if condition not satisfied
                model.Add()#exclude EC to degrees if condition not satisfied

                        #edPysEdMat
                model.Add(student gpa <= 2.0)
                model.Add(if residency > 2: prevcourse(degree(Ed))

                model.Add()#exclude PsyEd to degrees if condition not satisfied
                model.Add()#exclude MatEd to degrees if condition not satisfied
       




#solver
solver = cp_model.CpSolver()

## kung unsa na degree nasatisfied sa deptconstraints mao ra generatan ug specified prospectus.

##scholastic status i consider, para sa units

## paglaray sa mga prospectus, magcount ug temporary year, after i add sya sa residency. 

## i functionize ang code 

## Documentations CHAPTER 5

## UI Improvements

